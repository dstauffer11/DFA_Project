type token =
  | CHAR of (char)
  | STAR
  | CONCAT
  | OR
  | EPSILON
  | EMPTYSET
  | LPAREN
  | RPAREN
  | EOL

open Parsing;;
let _ = parse_error;;
# 2 "regexparser.mly"
  open Definitions
# 17 "regexparser.ml"
let yytransl_const = [|
  258 (* STAR *);
  259 (* CONCAT *);
  260 (* OR *);
  261 (* EPSILON *);
  262 (* EMPTYSET *);
  263 (* LPAREN *);
  264 (* RPAREN *);
  265 (* EOL *);
    0|]

let yytransl_block = [|
  257 (* CHAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\000\000"

let yylen = "\002\000\
\001\000\002\000\003\000\003\000\001\000\001\000\003\000\002\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\001\000\005\000\006\000\000\000\000\000\000\000\
\002\000\000\000\000\000\008\000\007\000\000\000\000\000"

let yydgoto = "\002\000\
\007\000"

let yysindex = "\255\255\
\011\255\000\000\000\000\000\000\000\000\011\255\005\255\002\255\
\000\000\011\255\011\255\000\000\000\000\000\255\019\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\013\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\003\000"

let yygindex = "\000\000\
\009\000"

let yytablesize = 268
let yytable = "\001\000\
\003\000\009\000\004\000\009\000\010\000\011\000\009\000\010\000\
\011\000\013\000\012\000\003\000\009\000\012\000\008\000\004\000\
\005\000\006\000\014\000\015\000\009\000\010\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\003\000\003\000\000\000\004\000\000\000\
\003\000\003\000\004\000\004\000"

let yycheck = "\001\000\
\000\000\002\001\000\000\002\001\003\001\004\001\002\001\003\001\
\004\001\008\001\009\001\001\001\000\000\009\001\006\000\005\001\
\006\001\007\001\010\000\011\000\002\001\003\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\255\255\004\001\255\255\
\008\001\009\001\008\001\009\001"

let yynames_const = "\
  STAR\000\
  CONCAT\000\
  OR\000\
  EPSILON\000\
  EMPTYSET\000\
  LPAREN\000\
  RPAREN\000\
  EOL\000\
  "

let yynames_block = "\
  CHAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 26 "regexparser.mly"
                          ( Character _1 )
# 154 "regexparser.ml"
               : Definitions.regex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Definitions.regex) in
    Obj.repr(
# 27 "regexparser.mly"
                                  ( Star _1 )
# 161 "regexparser.ml"
               : Definitions.regex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Definitions.regex) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Definitions.regex) in
    Obj.repr(
# 28 "regexparser.mly"
                                  ( Concat (_1, _3) )
# 169 "regexparser.ml"
               : Definitions.regex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Definitions.regex) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Definitions.regex) in
    Obj.repr(
# 29 "regexparser.mly"
                                  ( Or (_1, _3) )
# 177 "regexparser.ml"
               : Definitions.regex))
; (fun __caml_parser_env ->
    Obj.repr(
# 30 "regexparser.mly"
                                  ( Epsilon )
# 183 "regexparser.ml"
               : Definitions.regex))
; (fun __caml_parser_env ->
    Obj.repr(
# 31 "regexparser.mly"
                                  ( Emptyset )
# 189 "regexparser.ml"
               : Definitions.regex))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Definitions.regex) in
    Obj.repr(
# 32 "regexparser.mly"
                                  ( _2 )
# 196 "regexparser.ml"
               : Definitions.regex))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Definitions.regex) in
    Obj.repr(
# 33 "regexparser.mly"
                                  ( _1 )
# 203 "regexparser.ml"
               : Definitions.regex))
(* Entry regex_main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let regex_main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Definitions.regex)
